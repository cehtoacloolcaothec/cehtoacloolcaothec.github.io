const imgSrcDir = '../../src/img/pipes/{0}-{1}.svg';

const gridSize = {
    'nm' : 18,
    'sm' : 10,
    'md' : 6,
    'lg' : 4,
    'gt' : 2
};

const connections = {
    'start' : {
        '0'   : [0,  1],
        '90'  : [1,  0],
        '180' : [0, -1],
        '270' : [-1, 0]
    },        
    'end' : {
        '0'   : [0,  1],
        '90'  : [1,  0],
        '180' : [0, -1],
        '270' : [-1, 0]
    },
    'elbow' : {
        '0'   : [[-1, 0], [0, -1]],
        '90'  : [[0,  1], [-1, 0]],
        '180' : [[1,  0], [0,  1]],
        '270' : [[0, -1], [1,  0]]
    },
    'line' : {
        '0'   : [[0,  1], [0, -1]],
        '90'  : [[1,  0], [-1, 0]],
        '180' : [[0,  1], [0, -1]],
        '270' : [[1,  0], [-1, 0]]
    },
    't' : {
        '0'   : [[-1, 0], [0,  1], [1,  0]],
        '90'  : [[0,  1], [1,  0], [0, -1]],
        '180' : [[1,  0], [0, -1], [-1, 0]],
        '270' : [[0, -1], [-1, 0], [0,  1]]
    },
    'cross' : {
        '0'   : [[0, -1], [-1, 0], [0,  1], [1,  0]],
        '90'   : [[0, -1], [-1, 0], [0,  1], [1,  0]],
        '180'   : [[0, -1], [-1, 0], [0,  1], [1,  0]],
        '270'   : [[0, -1], [-1, 0], [0,  1], [1,  0]]
    }
};

var mapDecoder = {

};

var gridPresets = {
    'gt'  : ['STPE', 'SPTE'],

    'lg'  : ['SPTLLPPPTLLTPPPE', 'SPPPTLLTPPPLPLPE', 'STTTPTTLPPPLLTPE', 'STPPTTPLLPPPTLLE', 'SPPPLPTLLPPPTLLE', 'SPPPLTLTTTPLPPPE', 'SLLTPPTTPTTPPTLE', 'SLTPPPLPLPLPTPTE'],

    'md'  : ['SLLTPPPPPTTPPPPPLPLPLPLPPTPPTTPLPPPE', 'PSLLLTPLPPPLPLPTPLPLPPPLPTTELTPPPPPP', 'PSPTLPPLPPPPPLPPTTPLPPELPLPPPLPTLLLT', 'PSPPPPPLPTTLPLPPPPPLPPPEPTLTPLPPPTLT', 'PSLLTPPPPPLPTPPPTTLLPPPLPTPTTLPPPETT', 'STPPPPPTLLLTPPPPPLLPTLLTPLLPPPPPTLEP', 'PSLLTPPPPPLPPLPTTPTLPLPPTLPLPPPPPTEP', 'PSLLLTPTTPPLPPPTLTPPLLPPPPPTEPLTPPPP', 'PSLLLTPPPPPLPPTPTLPLTPLLPPPPPETPPLPP', 'PSLLTPPPPPLPTLLLTPLPPPPPLPPTLTTLLTPE', 'PPTLTPSPLPLPLPLPLPTLTPLEPPPPLLPTPPTT', 'TLTPPPSPLPTTPPLPPPPPLPEPPPLPLPPPTLTP', 'PPPPPPSLLLTPLPPPLPLPLPLPLPPPLPTLLETP', 'TLLLTPSPPPLPPPTPLPPTLLTPPLPPPPPTLLEP', 'PPLTLTSPPLPLLPPLPLTLLTPLPPPPETPLPPPP', 'PPPPPPSLLTPPPPPLPPPLPLPPTTPTLEPPPPPP', 'TLLLTPSPPPLPPTLLTPPLPPPPPLPTLTPTLTPE', 'PPPTLTSLLTPLPPPPPLPPPPPLLPPEPLTPPTLT', 'PPTLTPPSLPLPPTTPTTPPPPPLPLPPPLPPPELT', 'PPPPPPPSTPTLPPLPPPPPLPPEPTTPPLPTLLLT', 'PPPPTPPSLLLTPLPPPLPTTPPLPPTLLEPPPPPP', 'PPTLTPPSTPLPPPLPTTPPLPPLTLTPETTLLLTP', 'PPPTLTPSPLPLPLPLPLPTLTPLPPPPPLTPPPET', 'PTLLLTPSPPPLPPPPPLPPPTLTPPPLPPTPPTLE', 'SPPPPTTLLTPPPPPLPPPPPLPETLLTPLTLLLLT', 'STLLLTLLPPPLLLPPPLTTPTLTPPPEPLPTPTLT', 'SPTLLTLPLPPLLPLPPLTLTPPLPPPPPEPPPTPP', 'SPPPLPLPPPPPTLLLTPLPPPLPLPPPEPTLLLTP'],

    'sm'  : ['PPPPPPPPPPSLLLLLLLLTPPPPPPPPPLTPPPPPPPPLPTTLLLLLLTPPLPPPPPPPPPLLPPTLLTPPLPPPLPPLPPTLLLTPPEPTPPPPPPPP', 'SPTLTPPPPPLPLPLPTLLPLPLPLPPPPPTLTPLPPPPPPPPPLPTLTPTLLLTPLPLPLPPPPPLPLPLPPPPPLPLPLPPPPTTPLPTLLLLTTPEP', 'PPSPPPPPPPPPLPPPPLTPPPTTLTPPPPPPPTLTTPPTPPPPPLTPPPPPPPTTPPPPPPTLTPPPPPPTTPPPPPPPPTLLLLLLEPPPPPPPPPPP', 'PPPPPPTTPPPSLTPPLLPTPPPLPPPPPPPTLTPPPPPPTTPPPPTLLTTTPPPPLPPLPLPPPPLPPLPTLLLLTTLEPPPPPPPPPPPPPPPPPPPP', 'PPPPPPPPPPPPSLLLLLTPPPLPPPPPLPPPLPPPPPLPPPTLLTPPLPPPPPPLPPTPPLPLPLPPTPPPPPPTLLEPPTTPPPPPPPPPTLPPPPPP', 'TLLLLLLTPPLPPPPPPLPPLPPPPPPLPPLPPPSLLTLLLPPPPPPPPLLPPTPPPPPLLPPLLTPPPPLPPPPPPEPPTLTPPPTLPPPPTLLLTPPP', 'PTLLLLLLLTPLPPPPPPPLPLPPPPPPPLPSPPTLLTPLPPPPLPPLPLPPPPLPPLPLPPLPLPPLPLPTLPLPPTLTLTPPTLEPPPPPPPPPPPPP', 'PPPPPPPPPPTLLLSPPPPPLPPPPPPPPPTLLLLLLLLTPPPPPPPPPLPPPPPPPPPLPPLTTPPTLTPPPTPPPLPPPLLLPPPLPEPPPPPPPTLT', 'TLLTPPPLTTLPPLPPPPPPLPPSPTLTPPLPPPPLPLPPTLLLLTPLPPPPPPPPPLPPPPTLLLLTPPPLLPPPPPPPPPTTPPPPPPPPPTLLLLLE', 'TLSLLLLTLPLPPPPPPLPPLPTPTPPLPPLPPLTPPTPPLPPLPPPTPPLPPPPPPPPPLPPPPTLTPPTLLLLTPLPPPPPPPPPEPPPPPPPPPPPP', 'PPPTTPPLLPPPPLLPPPPPSLLTLPPTLTPPPPLPPLPLPPPPLPPLPLTLLLTPPLPLLPPPPPPLPLTLLLLLLTPLPPPPPPPPPEPPPPPPPPPP', 'PPPPTLLTPPPPPPLPPLPPPPSLTPPLPPPPPPPPPLPPTLLLLLLTPPLPPPPPPPPPTLLLLLLLLTTPPPPPPPPLPPPLPPPELTPPPPPPPPPP', 'PPPPPPPTLTPPSTPPPLPLTLTTPPPLPLLPPPPPPLPLLPPLLPPLPLLPPPPPPLPLLPPPPPPLPLTLLLLLLTPLPPPPPPPPPLPPPPPPPPET', 'PPPPPPPPPPPPPPTPPPPPTSPPLPPTPPLPPPLPPLPPLPPPPPPTPPTTPPPPPLPPPTLLLLLLLTPPPPPPPPPLPPTTPLPPPLPPPPPPPPPE', 'PPPTLLLLLTSPTTPPPPPLLPLPPPPPPLLPTLLTPPPLLPPPPLPPPLTLLLLTPPPLPPPPPPPPTTPPPPPPPPLPPPLTLPPPEPPPPPPPPPPP', 'PPSPPPPPPPPPLPPPPPPPPPLPTLLTPPPPLPLPPTTPPPLPLPPPLPPPLPLPPTTPPPLTTPPLPPPPTTPPPEPPPPPPPTPPPPPPPPPTLPPP', 'PPPPPPPPPPPPPPPPPPPPPSTLLLLLLTPLPPPPPPPLPLPPPTLTPLPTLLLTPLPLPPPPPPPLPLPPPPPPTTPTPPTLPPELLTPPPPPPPPPP', 'PPTLLLLTPPPPLPPPPLPPPPLPPPPLPPPPSPPPPLPPPPPPPPPLPPPPPPPPPLPPPPPPPTLTPPPPPPTLPPPPPPPPPTTPPPPPPPPPEPPP', 'PPPPPPPPPPPPTPPPPPTTPPLTTPPPLLPPPPPPPPLLSLLLLLLLTLPPPPPPPPPLPPPPPPPPPLPPPPTLLEPLPPPPTTPPPLPPPPPTLLLL', 'PPPPPPPPPPPPPTTPPPPPPPPLLPPTLTSLLTLPPLPLPPPPLPTTPLPPTLTPLPPLPTTPPTTPPEPTLLLTPPPPPPPPPPPPPPPPPPPPPLLP', 'PPPPPPTLLTPPTPPPLPPLPPPPPPLPPLPSLLTPLPPLPPPPLPLPPLPTLPLPLPPLPPTPLPLPETTLLLTPLPPPLTPPPPLPPPTLLLLLTPPP', 'TLLLLLLLLTLPPPPPPPPLLPPTLLTPPLLPPSPPLPPLLPPPPPLPPLLPTLPPLPPLLPPTPPLPPLLPPPPPLPPETLLLLLTPPPPPPPPPPPPP', 'PPPPPPPPPPTLTPPPPPPPLPLPPPPPPPLPSPPPPPPPLPPPPPPPPPTLLLLLLLLTPPPPPPPPPLPPPPPPPPPLPLTTTPPEPLPPPPLPPTLT', 'PPPPPPPPPPPTPPPPPPPPPPPSLLLLTPPPPLPPPPLPTPPLPPPPLPTPPLPPPPLPTPPLTLPPLPLLTPPLPPLPPPPPPPPPLPPPPPPPTTEP', 'PPPPPPPPPPPPPSLLLTPPPPPPPPPLPPPTLTPPPLPLPLPLPPPLPTPLPLPPPLPLPLPTLLLTPPPLPPPPPPPPPTLLLLLTPPPPPPPPPEPP', 'PPPSLLLLLTTPPLPPPPPLTPPLPPPLPLPPPTPLPTPLPPPPPPPPPLPPTLLLLLLTPPLPPPPPPPPPLPPPPPPPPPTLLLLLEPPPPPPPPPPP', 'PPSPPPPPPPPPLPPPPTLTPPLPPPPLPLPPTLLLLTPLPPLPPPPPPLPPLPPPTLLTPPLPPPLPPPPPTPTPEPPPPPPPLPPPPPPPPPLPPPPL', 'TLTPPPPPPPLPSPPPPPPPLPPPTLLLLTLPPPLPPPPLTLLLTPPPPLPPPPPPPPPLPPPPPPPELTPPPPTTPPPPPLLLPPPPPPPPPPPPPPPP', 'PPTLLLLLLTPPLPPPPPPLPPSPPPPPPLPPPPPTLPPLPPPPPPPPPLPPPTLLEPPLTPPLPPPPPLPPPLPPPPPLPPPTTPPPTTPPPPTLLLTP', 'PPPPPPPPPPPPPTLLLLLTTSPLPPPPPLLPPLPPPPPLLPPLPPLPPLLPPLTLTPETLPPLPPPPPPTLLTPPPPPPPPPPPPLPPLPPPPPPPPPP', 'PPPPTLLLTPPPPPLPPPLPSLLLTPPPLPPPPPPPPPLPPPPPPPPPTEPPPPPLPPPPPPTPPPPPPPPPPTTPPPPPPPPPPPPLPPPPPPPPPPPP', 'PPPPPPPPPPSPPPPPPPTPLPPPPLPPPPLPPPPTPPPPTLTPPLPPPPPPLPPTLLEPPPLPPLPPPPTLTPPLPPTPLPPPPLPPPPTLLLLTPPPP', 'PPPPPPPPPPPSLLLLLTPPPLPPPPPTPPPLPPTLTPPPPLPPLPLPPPPLPPLPLPLPPTLLTPLPPPPPPPPPEPPPPPPPPPPPLPPPPPPPPPLP', 'PSLLLLTPPPPPPPPPLPPPPPPPPPLPPPPPPPPPTLTPPPTLLLLLTPPPLPPPPPPPPPLPPPPPPPPPTLLTPPPPPPPPPEPPPPPPPPPPPPPP', 'SLLLLTPPPPPPPPPLPPPPPPPPPLPPPPPTLLLTPPPPPLPPPPPTLTPTTPPPPLPLPPLPPPPLPLPPLPPPPLPLPPTLLLLTPLPPPPPPPPPE'],

    'nm'  : ['SPPPPPPPPLPPPPPPPPLPPPPTTPPPPPPPPPPPLPPPPPPPPPPPPPPPPPLPPPTPPPPTLLLLLLTPLPPPLPPPPLPPPPPPLPLPPTPPPPTTPPPPPTTPLPPPPPPPLPPPLPPLPPLPPPPPPPLPPPPPPLPPLPPPTPPPLPPLLPPLPPLPPPPPPPLPTLPPPLPPLPPPPPPPLPTPPPTTPPLPPPPPPPLPPPPPLPPETLLLLLLLTLPPPPLPPLPPPPPPPPPPPPPPLPPLPPPPPPPPPPPPPPLPPLPPPPPPPPPPPPPPTTPLPPPPPPPPPPPPPPPTLTPPPPPPPPPPPPPPPPPP', 'PPPPPPPPPPPPPPPPPPPSPPPPPPPPPPPPPPPPPLPPPPTLLLLLLLLLTPPLPPPPLPPPPPPPPPLPPTTPPPLPPPPPPPPPLPPPLPPTTPPPPPPPPPLPPPLPTTPPPPPPPPPPLPPPTLTPPPPPPPPPPPLPPPPPPPPPPPPPPPPPLPPPPPPPPPPPPPPPPTTPPPPPPPPPPTLLLLLTPPPPPPPPPPTTPPPPPPPPPPPLPPPPLPPTLLLTPPPLPLLPPPLPPLPPPLPPPPTTLPPPLPPLPEPLPPPPPPPPPPLPPLPLPLPPPTTPPPPPTLLTPLPLPPPPPPPPPPPPPPPTLTPP', 'PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPSLLLLLLTPPLLPPPPPPPPPPPPPLPPPPPPPPPPPPPPPPPLPPPPPPPPPPPPPPPPPLPPPPPPPPTLLLLLLLLTTPPPTTPPLPPPPPPPPPPPPPLLPPLPPPPPPPPPPPPTTLPPLPPPTTPPPPPPPLPLPPLPPPPPPTLLLLLTPLPPLPPPPPPLPPPPPPPLPPTLLLLLLTPPPTPPPLPPPPPPPPPPPPPPPPPLPPPPPPPPPPPPPPPPPEPPPPPPPPPTTTTPPPPPPPPPPPLLLTLLTTPPPPPPPPPPPPPPPPTPPPPP', 'PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPSLLLLLLLLLTPPPPPPPLPPPPPPPPPLPPPPPPPLPPPPPPPPPLPPTTPPPLPPTLLLLLLTPPLLPPPLPPLPPPPPPPPTTLPPPLPPLPPPPPPPPLPTTPPLPPTLLLLLLLLTPPLPPLPPPPPPPPPPPPPPLPPLPPPPPPPPPPPPPPLPPLPPPPPPPPPPPPPPLPPTPPPPPPPPPPPPPPLPPPPPPTTLTLTPPLPPLPPPPPPPPPPPPPPPPPLPPPPPLPPPPPPLPPPPLPPPPPPPPPPPPPPPPPLPPPPPPPPPPPPPPPPPE', 'PPPPPPPPPPPPPPPPPPPPPPPPPTLLLLLLTPPPPPPPPPPLPPPPPPLPPPPPPPPPPLPPPPPPLPPPPSLLLLLTPPTLTPLPPPPPPPPPPPPPLPLPLPPPPPPPPPPPPPLPLPLPPPPPPPPPPLPPLPTLTPPPPPPPPPPPPPLPPPPPPPPPPPPPPPPPLPPPPPPPPTLLLLTPPPLPPPPPPPPLPPPPLPPPLPPPPTPPPLPPPPLPPPLPPTTPPPPLPPPPTLLLTPPPTLLPPLPPPPPPPPPPPPPPPPPLPPPPPPPPPPPPPPPPPLPPPPPPPPTLLLLTPPPTLLLLLLLLTPPPLEPP', 'PPTLLLLLLLLLLLLTPPPPLPPPPPPPPPPPPLPPPPLPPPPPPPPPPPPLPPPPTLLSPPPPPLPPPLPPPPPPPPPPPPPPPPPLPPPPTPPPPLPPPLPPPLPPPPLLPPLLPLPLPPPLPPPPPTPPLPPPPLPPPLPPPPPPPPPPPPTLPPPLPPPPPLPPPPTTTTPPPLPPPPPPLPPTTPPLPPPLPPPPPPLPPPPPPLPPPLPPPPPPLPPLPPPLPPPLPPPPPTLTPPPPPLPPPLPPPPPPLLPPPPPPPPPTTPPPPPPPPPPPPPLLPPLPPPPPPPPPPPPPLPPPEPPPPPPPPPPPPPPPPPPP', 'PPPSPPPPPPPPPPPPPPPPPLPPPPPPPPLPLLPPPPPLPPLPTTPPLPPPPPPPPLPPPPPPPPPPPPPPPPPLPPPPPTLLLLLLTPPPPLPPPPPLPPPPPPLPPPPLPPLPPLPPPPPPLPPPPLPPLPPLPPTTPPLPPPPLPPPPPLPPPPPPLPPPPLPPPPPLPPPPPPLPPPPTLLLLLTPPTLPPLPPPPPPPTPPPPPPPPPLPPPPPPPTPPPPPPPPPLPPPPPPPLPPPPPPPPPEPPPPPPPLPPPTLPPPPPPPPLPPPTPPPPLPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP', 'PPPPPPPPPPPPPPPPPPPSLLLLLLTPPLPPPPPPPPPPPPPPLPPPLLTPPPPPPPPPPPLPPPLTPPPPPPPPPPPPLPPTLPPPPPPPPPPPPPLPPTPPPPPPPPTLLLLLTPPPPPTLTPPPLPPPPPPPPPPTTPLPPPLPPPPPPPPPTTPPLPPPLPPPLPPPTLTPPPLPPPLPLLTPPPLPPPPPLPPPLPPPTTPPLPPPPPLPPPLPPPPPPPLPPPPPLPPPTLLLLLLLTPPPPPLPPPPPPPPPPPPPPEPPLPPPPPPTPPPPPPPLPPLPPPPPPPPPPPPPPLPTTPPPPPPPPPPPPPPTLTPP', 'PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPTLLSPPPPPPPPPPPPPPLPPPPPPTLLTPPPPPPPLPPPPPPLPPTTPPPPPPTLLLLLLTPPPLPPPPPPPPPPPPPPPPPTLLLTPPPPPPPPPPPPPPPPPLPPPPTPPPPPPPPPPPPLPPPPPPPTLLPLPPPPPLPPPPPPPTLPPPPPPPPLPPPPLPPPLTTLPPPPPLPPPPPPPPPPPPPPPPPLPPPPPPPPPPPPPPPPPLPPPPPPPPPPPPPPPPPLPPPPPPPPTLLLLLLLLTPPPPPPPPLTTPPPPPPPPPPPPPPPTLLLLLLEPPP', 'PPPPPPPPPPPPPPPPPPTLLLLLLTPPLTPPTPPPLPPPPPPLPPPPLLLLPPTLLSPPPLPPPLLTPPPPPPPPPPPTTPPPPPPPPPPPPPPPPPLPPPPPPPPPPPPPTPPPLPPPPPTTPPPPPPPPPPLPPPPPLTLTPPPPPPPTTPPPPTTPPLPTLLLLLTPPPPPLPPPLPLPPPPPPPPPPPLPPPLPLPPPPPPPPTPPLPPPLPLPPPPPPTTPPPLPPPLPLPPPPPPPPPPPLPPPLPTLLLLLLLLLLLTPPPLPPPPPPPPPPPPPPPPPLPPPPPPPPPPPTPPPPPLPPPPPPPTPPPPPPPPPE', 'PPPPPPPPTLLLLTPPPPPPPPPPPPLPPPPLPPPPPPPPPPPPLPPPPLPPTPPSLLLLLLTPPPPLPTTPPPPPPPPPPPPPPLPPPPPPPPPPPPPPPPPLPPPPPPPPTLLLLLLLLTPPPPPPPPLPPPPPPPPPPPLPPPPPLPPPPLLPPPPPTTPPPPLPPPPPPPPPPPLLPLPPTLLLLLLTPPTLTLPPPPPPPPPPPTLLTPPLPPPPPPPPPPPPPPPPPLPPPPPPPPPLPPPPPPPLPPPPPPPPPPLPPPPPPLPPPTTLPPPPPPPPPPPLPPPPPTTPPPPPPPPPETPPPPPPPPPPPPPPPPPP', 'PPPPPPPPPPPPPPPPPPPPPSPPPPPPPTLLLTPPPPPLPPPPPPPLPPPLPPPPPLPPPPPPPLPPPLPPPPPLPPPPPPPLPPPLPPPPPTLLLLLLTLPPPLPPPPPPPPPPPPTTPPPLPPPPPPPPPPPPPPPPPLPPPPPPPPPPPPPPPPPLPPPPPPPPPPPPPPPPPLPPPTLLLLLLLLLTPPPLPPPLPPPPPPPPPTLLLTPPPLPPPPPPPPPPPPPPPPPLPPPPPPPPPPPPPPPPPLPPPPPPPPPPPPPPPPPTLLLLLLLLLLLLLLLTPPPPPPPPPPPPPPPPPEPPPPPPPPPPPPPPPPPP', 'TLLLLTPPPPPPPPPPPPLPPPPLPPPPPPPPPPPPTLLSPLPPTPTPPPTLLTPPPPPLPPTPPPPPLPPLPPPPPLPPPPTLLLTPPLPPPLPLPPPPLPPPPPPLPLTLPLPPTPLPPPPPPLPTTPPLPPTPLPTPPPPLPTTPPLPPTPLPPPPPPLPLLLPLPPPPLPPLPLPLPPPLPLPPPPLPPLTLPLPPPPPLPPPPLPPPLPPLPPPPPLPPPPLPPPPPPLTLLLLTPPPPLPPPPPPLLPPPPPPPPPLPPPPPPLLPPPPPPPPPLPPPELLTLPPPPPPPPPLPPPPPPPTLLLLLLLLLTPPPPPPP', 'PTLLLLLLLLLLLLLLLTPLPPPPPPPPPPPPPPPLPSPTLLLLLLLLLLTPPLPPPLPPPPPPPPPPLPPLPPPTTPPPPPPPPPLPPLPPPPLPPPPPPPPPLPPLPPPPLPPPPPPPPPLPPLPPPTTPPPPPPPPPLPPLPPPLPPPPPPPPPPLPPLPPTTPPPPPPPPPPTLLTPTTPPPPPPPPPPPPPPPTTPPPPPPPPPPPPPPPPLPPPPPPPPPPTLLTPPPLPPPPPPPPPPLPPTTPPTTPPPPPPPPPLPPPLPPPTLLLLLLLLLTPPPLPPPPPPPPPPPPPPPPPEPPPPPPPPPPPPPPPPPPPP', 'SLLLLLLLLTPPPPPPPPPPPPPPPPPLPPTLLTPPPPTPPLPPTLPPLPPLPPPPPPPPPLTLPTLPPLPPPPLPPPPPPLPPLPPLPPPPLPTPTLLTPPLPPLPPPPTPPPLPPPPTTPPLPPPPLPTPLPPPPLPPPLPPPPLPTPTLLLLTPPPLPPPPTPPPPPPPPPPPPLPPPPLPPPPPPPPPPPPLPPPPPPPPPPPPPPPPTTPPTLLLLLLLLLLLLLTPPPLPPPPPPPPPPPPPPPPPLPPPPPPPPPPPPPPPPPTLLLLLLLLLLLLLLLLTPPPPPPPPPPPPPPPPPEPPPPPPPPPPPPPPPPPP'],
};

var gridPipeTypes = {
    'S' : ['start'],
    'E' : ['end'],
    'T' : ['elbow', 'elbow', 'elbow', 'elbow', 'elbow', 'elbow', 't', 't', 'cross'],                          
    'L' : ['line', 'line', 'line', 'line', 'line', 't', 't', 't', 'line', 'cross'],                              
    'P' : ['empty', 'empty', 'empty', 'empty', 'empty', 'dead', 'dead', 'line', 'cross', 't', 'elbow']          
};

class Stack { 
    // Array is used to implement a Stack 
    constructor() {
        this.items = (arguments.length == 0) ? [] : [arguments[0]];
        this.length = this.items.length;
    } 

    push(element) {
        this.items.push(element); 
        this.length++;
    }

    pop() {
        if (this.isEmpty()) {
            return undefined;
        }

        this.length--;
        return this.items.pop();
    }

    top() {
        if (this.isEmpty()) {
            return undefined;
        }

        return this.items[this.items.length - 1];
    }

    isEmpty() {
        return this.items.length == 0;
    }

    reset() {
        this.items = [];
        this.length = 0;
    }

    values(key) {
        var arr = [];

        for (var i = 0; i < this.length; i++) 
            arr.push(this.items[i][key]);
        
        return arr;
    }
}